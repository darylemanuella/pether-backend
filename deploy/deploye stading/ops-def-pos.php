<?php
/*
Webservices for POS.
Tano Fotang <mtf@fotang.info>

Mon Aug 13 16:15:42 WAT 2018
 */

$ops = array(

    /* ------------------------------------------------------*/
    /* 1.2.  Operations for both Service Provider & Vendor   */
    /* (move to SP WS)                                       */
    /* ------------------------------------------------------*/
  /*  'aspept'    =>['add_sp_comm_endpoint', [WS_ID_FIRST,WS_OPT_NONE, WS_METHOD_POST]],
    'uspept'    =>['upd_sp_comm_endpoint', [WS_ID_FIRST,WS_OPT_NONE, WS_METHOD_POST]],
    'dspept'    =>['del_sp_comm_endpoint', [WS_ID_FIRST,WS_OPT_NONE, WS_DELETE_POST]],
    'qspepts'   =>['get_sp_comm_endpoints',[WS_ID_FIRST, WS_OPT_NONE],
    'qspepts'   =>['get_sp_comm_endpoint', [WS_ID_FIRST, WS_OPT_NONE],
    'apos'      =>['add_pos',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'upos'      =>['upd_pos',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'dpos'      =>['del_pos',[WS_ID_FIRST, WS_OPT_NONE, WS_DELETE_POST]],
    'posact'   =>['activate_pos',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'posdact'  =>['deactivate_pos',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'qpos'     =>['get_pos',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'qposs'    =>['get_poss',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'aposcomm'      =>['add_pos_comm_endpoint',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'uposcomm'      =>['upd_pos_comm_endpoint',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'dposcomm'      =>['del_pos_comm_endpoint',[WS_ID_FIRST, WS_OPT_NONE, WS_DELETE_POST]],
    'qposcomm'      =>['get_pos_comm_endpoint',[WS_ID_FIRST, WS_OPT_NONE]],
    'qposcomms'     =>['get_pos_comm_endpoints',[WS_ID_FIRST, WS_OPT_NONE]],*/

    /* ------------------------------------- */
    /*    2. Insurerer Operations            */
    /*    (moved to central)                 */
    /* ------------------------------------- */
    /*
    'qinaff'   =>['get_insurer_affiliations',[WS_ID_FIRST, WS_OPT_NONE],
    'spinact'  =>['activate_sp_insurer',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'spindact' =>['deactivate_sp_insurer',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
     */

/* ------------------------------------- */
/*    3. SP Operations            */
/* (move to SP WS)                                       */
/* ------------------------------------- */
    /*    'qspaff'   =>['get_sp_affiliations',[WS_ID_FIRST, WS_OPT_NONE],*/

/* ------------------------------------- */
/*    4. POS Operations                  */
/* ------------------------------------- */
    /* login */
    'login'     =>['pos_login', [WS_ID_NONE, WS_OPT_MULTI, WS_METHOD_POST]],
    'logout'    =>['pos_logout', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST], []],
    /* affiliation */
    'p.qiaff'     =>['pos_get_affiliations',[WS_ID_FIRST, WS_OPT_NONE],
                [['status',ParamAttrib::OPTIONAL],
                ['start',ParamAttrib::OPTIONAL],
                ['count',ParamAttrib::OPTIONAL]]],
     /* authentification code */
    'p.bauth'   =>['pos_send_id_auth_code',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['benid',ParamAttrib::MANDATORY],
                ['email',ParamAttrib::OPTIONAL],
                ['tel',ParamAttrib::OPTIONAL]],
                'send_ben_auth_code', ['fwd_post_op_error'=>true]],
    'p.bauthv'  =>['pos_verify_id_auth_code',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['bauth',ParamAttrib::MANDATORY],
                ['pauth',ParamAttrib::MANDATORY],
                ['benid',null,WS_OPT_OUTPARAM]]],
    'p.bauthiv'  =>['pos_verify_ben_service_auth_code',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['bauth',ParamAttrib::MANDATORY],
                ['benid',ParamAttrib::MANDATORY]]],
    /* prescription batch */
    'p.sb'        =>['pos_start_prescriptions_batch',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['exsys'], ['id',ParamAttrib::MANDATORY],['d'],
                ['it',ParamAttrib::MANDATORY],['pkg'],['class'],['rem'],['date'],
                ['by'],[null,null,null,null,false]]],
    'p.sba'     =>['pos_start_prescriptions_batch_with_authcode',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['exsys'],
                ['id',ParamAttrib::MANDATORY],
                ['bauth'],
                ['pauth'],
                ['sauth'],
                ['d'],
                ['it',ParamAttrib::MANDATORY],['pkg'],['class'],['rem'],['date'],
                ['by']]],
    'p.usb'        =>['pos_upd_dispensation_batch',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY],['rem'],['date',ParamAttrib::MANDATORY],
                ['by',ParamAttrib::MANDATORY]]],
    
    'p.classifyb'=>['pos_classify_prescriptions_batch',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY],['class',ParamAttrib::MANDATORY]]],
    'p.qbatch'   =>['pos_get_prescriptions_batch',
                [WS_ID_FIRST, WS_OPT_NONE ],
                [['id',ParamAttrib::MANDATORY]]],
    'p.dbatch'    =>['pos_del_prescriptions_batch',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_DELETE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.finalb'    =>['pos_finalise_prescriptions_batch',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY]]],
	'p.qbatches'  =>['pos_get_prescriptions_batches', [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::OPTIONAL],['exsys'],['forsp'],
                ['start',ParamAttrib::OPTIONAL],
                ['end',ParamAttrib::OPTIONAL]]],

        // Ancillary encounter details
    'p.qdetts'  =>['pos_get_encounter_detail_types', [WS_ID_FIRST, WS_OPT_NONE],
                [['i',ParamAttrib::MANDATORY]]],
    'p.abadet'  =>['pos_add_batch_detail',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['code',ParamAttrib::MANDATORY],['id',ParamAttrib::MANDATORY],
                ['val',ParamAttrib::MANDATORY]]],
    'p.qbadet'  =>['pos_get_batch_detail',
                [WS_ID_FIRST, WS_OPT_NONE],
                [['code',ParamAttrib::MANDATORY],['id',ParamAttrib::MANDATORY]]],
    'p.dbadet'  =>['pos_del_batch_detail',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_DELETE],
                [['code',ParamAttrib::MANDATORY],['id',ParamAttrib::MANDATORY]]],


    'p.qfeecats' =>['pos_get_fee_categories', [WS_ID_FIRST, WS_OPT_MULTI],
                [['i',ParamAttrib::MANDATORY]]],

                /* product search, disease code search  */
    'p.icdsearch'  =>['pos_icd_code_search',[WS_ID_FIRST, WS_OPT_NONE],
                [['n',ParamAttrib::MANDATORY],['source'],['i',ParamAttrib::MANDATORY]]],
    'p.qprodcats'=>['get_product_categories',[WS_ID_FIRST, WS_OPT_NONE],
                [[null,null,null,null,TPAPP],['i',ParamAttrib::MANDATORY]]],
    'p.prodsearch'  =>['search_products',[WS_ID_FIRST, WS_OPT_NONE],
                [[null,null,null,null,TPAPP],
            ['n',ParamAttrib::MANDATORY],['prodcat'],['catid'],
            ['i',ParamAttrib::MANDATORY],[null,null,null,null,null],
            [null,null,null,null,null],
            ['start'], ['count',ParamAttrib::OPTIONAL,WS_OPT_INOUTPARAM]]],
    'p.prodsearchw'  =>['pos_search_products_with_coverage',
            [WS_ID_FIRST, WS_OPT_NONE],
            [['n',ParamAttrib::MANDATORY],['prodcat'],['catid'],
            ['pkgid',ParamAttrib::MANDATORY],[null,null,null,null,'P'],
            ['recurse'],
            ['start'], ['count',ParamAttrib::OPTIONAL,WS_OPT_INOUTPARAM]]],
    'p.prodsearchwd'  =>['pos_search_products_with_coverage',
            [WS_ID_FIRST, WS_OPT_NONE],
            [['n',ParamAttrib::MANDATORY],['prodcat'],[null,null,null,null,null],
            ['pkgid',ParamAttrib::MANDATORY],[null,null,null,null,'D'],
            ['recurse'],
            ['start'], ['count',ParamAttrib::OPTIONAL,WS_OPT_INOUTPARAM]]],

//  'sb2'   =>['pos_start_prescriptions_batch2',[WS_ID_NONE, WS_OPT_NONE, WS_METHOD_POST]]// by sms
    'p.qcats' =>['pos_get_product_categories', [WS_ID_FIRST, WS_OPT_NONE],
                [['i'],['pkgid'],['pkgname']]],
'p.apfee'     =>['pos_addPrescription_fee',
                [WS_ID_FIRST,WS_OPT_MULTI, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ['presid',ParamAttrib::MANDATORY],
                ['catid',ParamAttrib::MANDATORY],
                ['feecatid',ParamAttrib::OPTIONAL],
                ['icdcode',ParamAttrib::OPTIONAL],
                ['prod',ParamAttrib::OPTIONAL],
                ['name',ParamAttrib::OPTIONAL],
                ['qty',ParamAttrib::MANDATORY],
                ['cost',ParamAttrib::MANDATORY],
                ['rem',ParamAttrib::OPTIONAL],
                ['mo',ParamAttrib::OPTIONAL],
                ['date',ParamAttrib::OPTIONAL],
                ]],
	'p.ap'    =>['pos_addPrescription', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ['isfee',ParamAttrib::OPTIONAL],
                ['feecatid',ParamAttrib::OPTIONAL],
                ['presid',ParamAttrib::MANDATORY],
                ['catid',ParamAttrib::MANDATORY],
                ['icdcode'],
                ['prod',ParamAttrib::OPTIONAL],
                ['name',ParamAttrib::OPTIONAL],
                ['qty',ParamAttrib::MANDATORY],
                ['mo',ParamAttrib::OPTIONAL],
                ['rem',ParamAttrib::OPTIONAL],
                ['id',null,WS_OPT_OUTPARAM],
                ['needs_approval',null,WS_OPT_OUTPARAM]]],
	'p.axp'    =>['pos_addPrescription', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ['isfee',ParamAttrib::OPTIONAL],
                ['feecatid',ParamAttrib::OPTIONAL],
                ['presid'],
                ['catid',ParamAttrib::MANDATORY],
                ['icdcode'],
                ['prod',ParamAttrib::OPTIONAL],
                ['name',ParamAttrib::OPTIONAL],
                ['qty',ParamAttrib::MANDATORY],
                ['mo',ParamAttrib::OPTIONAL],
                ['rem',ParamAttrib::OPTIONAL],
                ['id',null,WS_OPT_OUTPARAM],
                ['needs_approval',null,WS_OPT_OUTPARAM]]],
	'p.qpappp'   =>['pos_get_prescription_packages', [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
	'p.qpappb'   =>['pos_get_batch_prescription_packages', [WS_ID_FIRST, WS_OPT_NONE],
                [['batch',ParamAttrib::MANDATORY]]],
    'p.setpresp'  =>['pos_set_prescription_package',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY],
                ['pkgid',ParamAttrib::MANDATORY]]],
//	'ap2'   =>['pos_addPrescription2', [WS_ID_NONE, WS_OPT_OUTPARAM)), // by sms
	'p.qpb'   =>['pos_getPrescriptions', [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY],
                ['status',ParamAttrib::OPTIONAL]]],
	'p.qpfs'   =>['pos_get_prescr_fulfillment', [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],

	'p.qp4d'  =>['pos_getPrescr4dispensation', [WS_ID_FIRST, WS_OPT_MULTI],
                [['id',ParamAttrib::MANDATORY]]],
	'p.qp4p'  =>['pos_getPrescr4printing', [WS_ID_FIRST, WS_OPT_MULTI],
                [['id',ParamAttrib::MANDATORY]]],
	'p.qp0'   =>['pos_getPrescription', [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qp'    =>['pos_get_posPrescriptions', [WS_ID_FIRST, WS_OPT_NONE],
                [['all',ParamAttrib::OPTIONAL],
                ['start',ParamAttrib::OPTIONAL],
                ['end',ParamAttrib::OPTIONAL]]],
	'p.up'    =>['pos_upd_prescription', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY],
                ['presid',ParamAttrib::MANDATORY],
                ['catid',ParamAttrib::MANDATORY],
                ['icdcode'],
                ['prod',ParamAttrib::OPTIONAL],
                ['name',ParamAttrib::OPTIONAL],
                ['qty',ParamAttrib::MANDATORY],
                ['rem',ParamAttrib::MANDATORY]]],
    'p.dp'    =>['pos_cancelPrescription', [WS_ID_FIRST,
                WS_OPT_NONE, WS_METHOD_DELETE], // can only be done by insurer
                [['id',ParamAttrib::MANDATORY],
                ['reason',ParamAttrib::OPTIONAL]]],
    'p.sbcsms'    =>['pos_mark_batchcode_sms_sent',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'p.sbcemail'  =>['pos_mark_batchcode_email_sent',[WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    /* beneficiary */
    'p.qbbf'=>['pos_get_beneficiary_full_by_batchcode', [WS_ID_FIRST, WS_OPT_EXPBIN],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qbb'=>['pos_get_beneficiary_by_batchcode', [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qbid'=>['pos_getBeneficiary4Prescription', [WS_ID_FIRST, WS_OPT_EXPBIN],
                [['sysid'],['benid']]],
    'p.qbid2'=>['pos_get_beneficiary_brief', [WS_ID_FIRST, WS_OPT_NONE],
                [['benid',ParamAttrib::MANDATORY]]],

            /* ex-system prescriptions batch docs */
    'p.adbatchdoc'  =>['pos_add_dispensation_batch_doc',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ['data',ParamAttrib::FILE_MANDATORY],
                [null,null,null,'getFileName'],
                ['type'],['d']]],
    'p.udbatchdoc'  =>['pos_upd_dispensation_batch_doc',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY],
                ['type'],['d']]],
    'p.udbatchdocd'  =>['pos_change_dispensation_batch_doc',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY],
                ['data',ParamAttrib::FILE_MANDATORY],
                [null,null,null,'getFileName']]],
    'p.ddbatchdoc'  =>['pos_del_dispensation_batch_doc',
                [WS_ID_FIRST, WS_OPT_EXPBIN, WS_METHOD_DELETE],
                [['id',ParamAttrib::MANDATORY]]],
    
                
      /* dispensation */
    'p.ad'=>['pos_addDispensation',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ['pkgid',ParamAttrib::OPTIONAL],
                ['dispid',ParamAttrib::MANDATORY],
                ['prod',ParamAttrib::OPTIONAL],
                ['name',ParamAttrib::OPTIONAL],
                ['qty',ParamAttrib::MANDATORY],
                ['cost',ParamAttrib::MANDATORY],
                ['date',ParamAttrib::OPTIONAL],
                ['rem',ParamAttrib::OPTIONAL],
		['update',ParamAttrib::OPTIONAL]]],
                /* operation daryle send details claim sms*/

    'p.getclaimid'  =>['get_claimid',[WS_ID_FIRST, WS_OPT_NONE],
         [['dispId']]],




    'p.find'=>['pos_finalise_dispensation',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ['icost',ParamAttrib::MANDATORY]]],
    'p.dfind'=>['pos_reverse_dispensation',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ]],
    'p.dd'=>['pos_delDispensation', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_DELETE],
                [['id',ParamAttrib::MANDATORY],
                ['reason',ParamAttrib::OPTIONAL]]],
    'p.qds'=>['pos_getDispensations', [WS_ID_FIRST, WS_OPT_NONE],
                [['status',ParamAttrib::OPTIONAL],
                ['start',ParamAttrib::OPTIONAL],
                ['end',ParamAttrib::OPTIONAL]],
                null,['log'=>false]],
    'p.qdsbb' =>['pos_get_dispensations_for_batch',[WS_ID_FIRST, WS_OPT_MULTI],
                [['id',ParamAttrib::MANDATORY],
                ['status',ParamAttrib::OPTIONAL],
                ['startd',ParamAttrib::OPTIONAL],
                ['endd',ParamAttrib::OPTIONAL]]],
    'p.qclaimbb' =>['pos_get_consumption_for_batch',[WS_ID_FIRST, WS_OPT_MULTI],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qd'=>['pos_getDispensation', [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.aapreq'=>['pos_make_disp_approval_request',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY]],
                'notify_approvers'],
    'p.adapreq'=>['pos_make_disp_approval_request',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY]],
                'notify_approvers', ['fwd_post_op_error'=>true]],
    'p.apapreq'=>['pos_make_pres_approval_request',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY]],
                'notify_approvers', ['fwd_post_op_error'=>true]],
    'p.qapreq2'=>['pos_get_approval_req_status',
                [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qapreq'=>['pos_get_approval_status',[WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY],
                ['stage',ParamAttrib::MANDATORY]]],
    'p.qpapreq'=>['pos_get_pres_approval_status',[WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qdapreq'=>['pos_get_disp_approval_status',[WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.aapreqdoc'=>['pos_add_approval_request_doc',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],
    'p.dapreqdoc'=>['pos_del_approval_request_doc',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_DELETE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qapreqdoc'=>['pos_get_approval_request_doc',[WS_ID_FIRST, WS_OPT_EXPBIN],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qapreqdocs'=>['pos_get_approval_request_docs',
                [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY],
                ['stage',ParamAttrib::MANDATORY]]],
    'p.qpapreqdocs'=>['pos_get_pres_approval_request_docs',
                [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.qdapreqdocs'=>['pos_get_disp_approval_request_docs',
                [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.uapreqdoc' =>['pos_upd_approval_request_doc_details',
                [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY],
                ['reqid',ParamAttrib::MANDATORY],
                ['rem',ParamAttrib::MANDATORY]]],
    'p.uapreqdoc2'=>['pos_upd_approval_request_doc_doc',
        [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST]],

        /* batch claims together */
	'p.aclset' =>['pos_claimsset_start', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [
                ['rem',ParamAttrib::OPTIONAL],
                ['id',null,WS_OPT_OUTPARAM]]],
    'p.qclsets' =>['pos_claimssets_get',[WS_ID_FIRST, WS_OPT_NONE],
                [['allpos'],
                ['startd'], ['endd']]],
    'p.dclset'=>['pos_claimssets_del', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_DELETE],
                [['id',ParamAttrib::MANDATORY]]],
    'p.finclset'=>['pos_claimssets_finalise', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY]]],
    'p.rfinclset'=>['pos_claimssets_finalise_reverse', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_PUT],
                [['id',ParamAttrib::MANDATORY]]],
	'p.aclsetcl' =>['pos_claimssets_add_claim', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ['claim',ParamAttrib::MANDATORY]]],
	'p.dclsetcl' =>['pos_claimssets_remove_claim', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_DELETE],
                [['id',ParamAttrib::MANDATORY],
                ['claim',ParamAttrib::MANDATORY]]],
	'p.aclsetd' =>['pos_claimssets_add_disp', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_POST],
                [['id',ParamAttrib::MANDATORY],
                ['dispid',ParamAttrib::MANDATORY]]],
	'p.dclsetd' =>['pos_claimssets_remove_disp', [WS_ID_FIRST, WS_OPT_NONE, WS_METHOD_DELETE],
                [['id',ParamAttrib::MANDATORY],
                ['dispid',ParamAttrib::MANDATORY]]],
    'p.qclsetcls'=>['pos_claimssets_get_claims', [WS_ID_FIRST, WS_OPT_NONE],
                [['id',ParamAttrib::MANDATORY]]],


   /* enrollee identification */
    'p.qfp'       =>['pos_getFingerlist', [WS_ID_FIRST, WS_OPT_NONE],
                [['b',ParamAttrib::MANDATORY]]],
    'p.qbbyfp'    =>['pos_identify_fp_all',
                 [WS_ID_NONE, WS_OPT_NONE, WS_METHOD_POST]],
                    
                /* subscribers */
    'p.qef'       =>['pos_getSubscriberByIdFull',[WS_ID_FIRST, WS_OPT_NONE],
                [['e',ParamAttrib::MANDATORY]]],

    'version'   =>array(false, array(WS_ID_NONE, WS_OPT_NONE))

    );
require_once('./ops-shared-def.inc');
if(isset($shared_ops))
    $ops=array_merge($ops,$shared_ops);

include_once('./ops-generic.inc');
if(isset($generic_ops))
    $ops=array_merge($ops,$generic_ops);
//EOF
